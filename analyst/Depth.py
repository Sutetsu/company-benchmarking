internals = ['+','-','*','=']#Returns true if x is a numberdef is_number(x):    #print('Is number')    try:        x = float(x)        return True    except:        return Falsedef getFunc(string):    s = string.split(' ')    #Get EID    EID = s[0]    #Get symbol    sym = s[1]    #Get vars into a string for db    var = s[2:]    func = [EID, sym, var]    return funcdef readParsed(path):    todo = {}    parsed = open(path, 'r')    for line in parsed:        #Remove newline at the end of each string        string = line.rstrip()        func = getFunc(string)        func.append(0)        todo[func[0]] = func[1:]    parsed.close()    return tododef contains_var(func):    print('Contains var')    print(func)    try:        args = func[1]    except:        return False    for arg in args:        if is_eid(arg):            return True    return Falsedef is_eid(arg):    try:        if arg[0].islower():            if arg[1].islower():                if arg[2].isdigit():                    return True            elif arg[1].isdigit():                return True    except:        return Falsedef initial_depths(pars):    for eid in pars:        print(pars[eid])        if not contains_var(pars[eid]):            print('Contains no vars')            if pars[eid][0] == '*':                pars[eid] = pars[eid][2]+1            else:                pars[eid] = pars[eid][2]    return parsdef found_depth(funcs, arg):    try:        a = funcs[arg][1]        return False    except:        print('Got depth')        return True    def iterate(funcs):    for eid in funcs:        if contains_var(funcs[eid]):            print('-'*10)            print('EID',eid)            print('ARGS',funcs[eid][1])            for arg in funcs[eid][1]:                print(arg)                if found_depth(funcs, arg) and not arg.isdigit() and not arg == 'Done' and not is_number(arg):                    print('MAX',funcs[eid][2], funcs[arg])                    funcs[eid][2] = max(funcs[eid][2], funcs[arg])                    print('New depth',funcs[eid][2])                    print(funcs[eid][1])                    funcs[eid][1] = ['Done' if a == arg else a for a in funcs[eid][1]]    for eid in funcs:        print(eid)        try:            if not contains_var(funcs[eid]):                if funcs[eid][0] == '*':                    funcs[eid] = funcs[eid][2]+1                    if funcs[eid] > mult_max:                        mult_max = funcs[eid]                elif funcs[eid][0] not in internals:                    funcs[eid] = 0                else:                    funcs[eid] = funcs[eid][2]                print('New depth:', funcs[eid])            else:                print('Still has vars')        except:            print('Already done')    return funcs                    def check_if_done(funcs):    print('Check if done')    for eid in funcs:        print(eid)        print(funcs[eid])        try:            a = funcs[eid][1]            print('Found a var')            print(funcs[eid][1])            return False        except:            print('Done')    return Trueif __name__ == "__main__":    global mult_max    mult_max = 0    pars = readParsed('parsed2.txt')    funcs = initial_depths(pars)    print('-'*50)    print(funcs)    while not check_if_done(funcs):        print('-'*50)        funcs = iterate(funcs)    print(funcs)        highest_eid = ''    highest_val = 0    for eid in funcs:        if funcs[eid] > highest_val:            highest_val = funcs[eid]            highest_eid = eid    print('Highest', highest_eid, highest_val)    print('Multmax', mult_max)