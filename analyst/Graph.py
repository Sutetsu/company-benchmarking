import sysimport xlsxwriterfrom xlsxwriter.utility import xl_rowcol_to_cellimport xlrdimport networkx as nximport matplotlib as mplimport matplotlib.pyplot as plt from networkx.drawing.nx_agraph import graphviz_layoutreverseColours=Falseupwards=Falselabels=Truepath= r'./KennKunststoff_v83.xlsm'def findEID(EID):	for sh in xlrd.open_workbook(path).sheets():  		for row in range(sh.nrows):			cell = sh.cell(row, 7)			#print(cell)			if cell.value == EID:				print('-----------')				print('Found!')				return xl_rowcol_to_cell(row,7) def dependsOn(EID):	for sh in xlrd.open_workbook(path).sheets():  		for row in range(sh.nrows):			cell = sh.cell(row, 7)			if cell.value == EID:				print('-----------')				print(xl_rowcol_to_cell(row,9))				st = sh.cell(row,9).value							if type(st) == float:					st = str(st)				st.encode('ascii','ignore')				print(st)				IDs = IDsInString(st)				func = functionsInString(st)				return [IDs,func]	def IDsInString(String):	IDlist = []	for char_index in range(len(String)):		if String[char_index].islower():			if String[char_index+1].islower():				if String[char_index+2].isdigit():					st = String[char_index]+String[char_index+1]					i = 2					while String[char_index+i].isdigit():						st = st+String[char_index+i]						i = i+1					IDlist.append(st)	return IDlistdef functionsInString(String):	func = []	if 'WURZEL' in String:		func.append('p')	if 'MAX' in String:		func.append('m')	if 'MIN' in String:		func.append('m')	if '^' in String:		func.append('p')	if '|' in String:		func.append('a')	if '/' in String:		func.append('d')	if func:		print('FUNCTIONS:')		print(func)	return funcdef totalFuncs(String):	func = []	if 'WURZEL' in String:		func.append('p')	if 'MAX' in String:		func.append('m')	if 'MIN' in String:		func.append('m')	if '^' in String:		func.append('p')	if '|' in String:		func.append('a')	if '/' in String:		func.append('d')	if '+' in String:		func.append('e')	if '-' in String:		func.append('e')	if '*' in String:		func.append('e')	return funcdef usedIn(String):	IDlist = []	func = []	for sh in xlrd.open_workbook(path).sheets():  		for row in range(sh.nrows):			#Turn to String			st = sh.cell(row,9).value			if type(st) == float:				st = str(st)			st.encode('ascii','ignore')				if String in st:				ID = sh.cell(row,7).value				IDlist.append(ID)				print(st)				func = functionsInString(st)	return [IDlist, func]def decideColour(funcs):	if reverseColours:		colour='black'		if funcs:			colour='white'	else:		colour='white'		if funcs:			if 'd' in funcs:				colour='gray'			if 'p' in funcs:				colour='red'			if 'm' in funcs:				colour='blue'				if 'p' in funcs:					colour='magenta'			if 'a' in funcs:				colour='yellow'				if 'm' in funcs:					colour='green'					if 'p' in funcs:						colour='black'				if 'p' in funcs:					colour='orange'	print(colour)	return colourdef graphDependencies(EIDsource):	deps = dependsOn(EIDsource)	colour=decideColour(deps[1])	G.add_node(EIDsource, node_color=colour)	G.nodes[EIDsource]['color'] = colour	if deps[0]:		for EID in deps[0]:			if not (G.has_node(EID)):				graphDependencies(EID)			G.add_edge(EID, EIDsource)def graphUpward(EIDsource):	deps = usedIn(EIDsource)	colour=decideColour(deps[1])	G.add_node(EIDsource, node_color=colour)	G.nodes[EIDsource]['color'] = colour	G.nodes[EIDsource]['color'] = colour	if deps[0]:		for EID in deps[0]:			if not (G.has_node(EID)):				graphUpward(EID)			G.add_edge(EIDsource, EID)def graphAll():	for sh in xlrd.open_workbook(path).sheets():  		for row in range(1, sh.nrows):  		#for row in range(2230, 2241):			EIDsource = sh.cell(row, 7).value			print(EIDsource)			deps = dependsOn(EIDsource)			colour=decideColour(deps[1])			G.add_node(EIDsource, node_color=colour)			G.nodes[EIDsource]['color'] = colour			for EID in deps[0]:				if not (G.has_node(EID)):					G.add_node(EID, node_color=colour)					G.nodes[EID]['color'] = colour				G.add_edge(EID, EIDsource)def graphAll2():	for sh in xlrd.open_workbook(path).sheets():  		for row in range(1, sh.nrows):			EIDsource = sh.cell(row, 7).value			print('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')			print('UP TO:', row)			graphDependencies(EIDsource)			def count():	dif = 0	es = 0	total = 0	lines = 0	var = 0	for sh in xlrd.open_workbook(path).sheets():  		for row in range(1, sh.nrows):			print(row)			lines = lines+1			st = sh.cell(row, 9).value			if type(st) == float:				st = str(st)			if functionsInString(st):				dif = dif+1			else:				es = es+1			if totalFuncs(st):				total = total+1	print('Total lines')	print(lines)	print('Total lines with functions:')	print(total)	print('Possible difficulties:')	print(dif)	print('Probably easy:')	print(es)	print('Excluding variables:')	print(es-825-(1334-836))			G = nx.DiGraph()for arg in sys.argv:	if arg == 'nolabels':		print('Not showing labels')		labels = False	if arg == 'up':		print('Building upwards')		upwards = True	if arg == 'reverse':		print('Reversing colours')		reverseColours=Trueif sys.argv[1] == 'count':	count()if sys.argv[1] == 'all':	graphAll()if sys.argv[1] == 'all2':	graphAll2()else:	if findEID(sys.argv[1]):		if upwards:			graphUpwards(sys.argv[1])		else:			graphDependencies(sys.argv[1])colors = [node[1]['color'] for node in G.nodes(data=True)] #pos=nx.kamada_kawai_layout(G, scale=2)#pos=nx.spring_layout(G, scale=2)pos=graphviz_layout(G, prog='dot')#pos=graphviz_layout(G, prog='sfdp')nx.draw(G, pos, with_labels=labels, font_weight='bold', node_color=colors, font_size=8, node_size=50)plt.show()